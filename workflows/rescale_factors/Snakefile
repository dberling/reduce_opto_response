import numpy as np

cells = config['cells']
radii = np.arange(0, 25, 25)
angles = np.arange(0, 2*np.pi, np.pi)
rel_intensities = np.array([1, 5, 25, 125, 625])

rule all:
  input: 
    expand('workflows/rescale_factors/rank_compartments/measures/measures_{cell_id}.csv',
           cell_id=cells
    ),
    expand('workflows/rescale_factors/rank_compartments/measures/APC_{cell_id}.csv',
           cell_id=cells
    )

rule merge_measures:
  output: 
    'workflows/rescale_factors/rank_compartments/measures/measures_{cell_id}.csv'
  input: 
    expand('workflows/rescale_factors/rank_compartments/intermed_data/{{cell_id}}/measure_{radius_um}.csv',
           radius_um = radii 
    )
  script: 'scripts/merge_data.py'

rule merge_APC:
  output: 
    'workflows/rescale_factors/rank_compartments/measures/APC_{cell_id}.csv'
  input: 
    expand('workflows/rescale_factors/rank_compartments/intermed_data/{{cell_id}}/APC_{radius_um}.csv',
           radius_um = radii
    )
  script: 'scripts/merge_data.py'

rule simulate:
  output: 
    'workflows/rescale_factors/rank_compartments/intermed_data/{cell_id}/measure_{radius_um}.csv',
    'workflows/rescale_factors/rank_compartments/intermed_data/{cell_id}/APC_{radius_um}.csv'
  input: 
    'thresh_intensity/{cell_id}.npy',
    'workflows/rescale_factors/rank_compartments/comp_impedances/{cell_id}.npy'
  params:
    rel_intensity=rel_intensities,
    angles_rad=angles
  script: 
    'scripts/simulate.py'

rule calc_impedances:
  output:
    'workflows/rescale_factors/rank_compartments/comp_impedances/{cell_id}.npy'
  script:
    'scripts/calc_impedances.py'

rule find_threshold_stim_intensity:
  output: 'thresh_intensity/{cell_id}.npy'
  script: '../scripts/find_thresh_intensity.py'
