import numpy as np

cells = config['cells']
radii = np.arange(0, 375, 25)
angles = np.arange(0, 2*np.pi, np.pi/4)
rel_intensities = np.array([0.5, 0.7, 1, 1.5, 2.5, 3, 6, 16, 40, 98, 244])

rule all:
  input: 
    expand('workflows/test_effective_conductance_sum/data/APC_eff_sum_{cell_id}.csv',
           cell_id=cells
    ),
    expand('workflows/test_effective_conductance_sum/data/APC_full_passive_{cell_id}.csv',
           cell_id=cells
    ),
    expand('workflows/test_effective_conductance_sum/data/APC_full_active_{cell_id}.csv',
           cell_id=cells
    )

rule merge_eff_sum:
  output: 
    'workflows/test_effective_conductance_sum/data/APC_eff_sum_{cell_id}.csv',
  input: 
    expand(
        'workflows/test_effective_conductance_sum/data/eff_sum_data/{{cell_id}}/APC_{radius_um}.csv',
        radius_um = radii 
    )
  script: 'scripts/merge_data.py'

rule merge_full_passive:
  output: 
    'workflows/test_effective_conductance_sum/data/APC_full_passive_{cell_id}.csv'
  input: 
    expand(
        'workflows/test_effective_conductance_sum/data/full_passive_data/{{cell_id}}/APC_{radius_um}.csv',
        radius_um = radii 
    )
  script: 'scripts/merge_data.py'

rule merge_full_active:
  output: 
    'workflows/test_effective_conductance_sum/data/APC_full_active_{cell_id}.csv'
  input: 
    expand(
        'workflows/test_effective_conductance_sum/data/full_active_data/{{cell_id}}/APC_{radius_um}.csv',
        radius_um = radii 
    )
  script: 'scripts/merge_data.py'

rule simulate_eff_sum:
  output: 
    'workflows/test_effective_conductance_sum/data/eff_sum_data/{cell_id}/APC_{radius_um}.csv'
  input: 
    'thresh_intensity/{cell_id}.npy',
    'workflows/test_effective_conductance_sum/data/full_passive_data/{cell_id}/conductance_{radius_um}.csv'
  params:
    rel_intensity=rel_intensities,
    angles_rad=angles,
    cond_scale_factors = [0.5, 0.75, 1]
  script: 
    'scripts/simulate_eff_sum.py'

rule simulate_full_passive:
  output: 
    'workflows/test_effective_conductance_sum/data/full_passive_data/{cell_id}/APC_{radius_um}.csv',
    'workflows/test_effective_conductance_sum/data/full_passive_data/{cell_id}/conductance_{radius_um}.csv'
  input: 
    'thresh_intensity/{cell_id}.npy',
    'workflows/rescale_factors/rank_compartments/comp_impedances/{cell_id}.npy'
  params:
    rel_intensity=rel_intensities,
    angles_rad=angles
  script: 
    'scripts/simulate_conductance_over_time.py'

rule simulate_full_active:
  output: 
    'workflows/test_effective_conductance_sum/data/full_active_data/{cell_id}/APC_{radius_um}.csv',
  input: 
    'thresh_intensity/{cell_id}.npy',
  params:
    rel_intensity=rel_intensities,
    angles_rad=angles
  script: 
    'scripts/simulate_active.py'

rule calc_impedances:
  output:
    'workflows/rescale_factors/rank_compartments/comp_impedances/{cell_id}.npy'
  script:
    'scripts/calc_impedances.py'

rule find_threshold_stim_intensity:
  output: 'thresh_intensity/{cell_id}.npy'
  script: '../scripts/find_thresh_intensity.py'
