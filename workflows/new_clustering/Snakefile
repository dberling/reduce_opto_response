import numpy as np
xys = np.arange(-1*config['xy_max'], config['xy_max'], config['dxy'])
xs, ys = [arr.flatten() for arr in np.meshgrid(xys, xys)]
patt_ids = np.arange(0,len(xs))

rule all:
  input: 
    #expand('workflows/new_clustering/data/APC_soma_only_1scale_active_{cell_id}-cond_scale_fct{cond_scale_fct}--xymax_{xymax}-dxy_{dxy}.csv',
    #       cell_id=config['cells'],
    #       cond_scale_fct=config['soma_1scale_cond_scl_fct'],
    #),
    expand('workflows/new_clustering/data/APC_effsum_active_{cell_id}-cond_scale_fct{cond_scale_fct}--xymax_{xymax}-dxy_{dxy}.csv',
           cell_id=config['cells'],
           cond_scale_fct=config['cond_scl_fct'],
           xymax=config['xy_max'],
           dxy=config['dxy']
    ),
    expand('workflows/new_clustering/data/APC_reduced_active_{cell_id}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}-xymax_{xymax}-dxy_{dxy}.csv',
           cell_id=config['cells'],
           cond_scale_fct=config['cond_scl_fct'],
           cluster_grid_width=config['cluster_grid_width'],
           xymax=config['xy_max'],
           dxy=config['dxy']
    ),
    expand('workflows/new_clustering/data/APC_adex_{cell_id}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}-xymax_{xymax}-dxy_{dxy}.csv',
           cell_id=config['cells'],
           cond_scale_fct=config['cond_scl_fct'],
           cluster_grid_width=config['cluster_grid_width'],
           xymax=config['xy_max'],
           dxy=config['dxy']
    ),
    expand('workflows/new_clustering/data/APC_full_active_{cell_id}-xymax_{xymax}-dxy_{dxy}.csv',
           cell_id=config['cells'],
           xymax=config['xy_max'],
           dxy=config['dxy']
    ),

rule merge_soma_only_1scale_active:
  output: 
    'workflows/new_clustering/data/APC_soma_only_1scale_active_{cell_id}-cond_scale_fct{cond_scale_fct}--xymax_{xymax}-dxy_{dxy}.csv'
  input: 
    expand(
        'workflows/new_clustering/data/soma_only_1scale_active_data/{{cell_id}}/APC_for_slp-id{patt_id}-xymax_{{xymax}}-dxy_{{dxy}}-norm_power_{norm_power}-cond_scale_fct{{cond_scale_fct}}-.csv',
        patt_id=patt_ids,
        norm_power=config['norm_power']
    )
  script: 
    'scripts/merge_data.py'

rule simulate_soma_only_1scale_active:
  output: 
    'workflows/new_clustering/data/soma_only_1scale_active_data/{cell_id}/APC_for_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cond_scale_fct{cond_scale_factor}-.csv'
  input:
    'workflows/new_clustering/data/cond_data/{cell_id}/comp_conds_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.npy',
    'workflows/new_clustering/data/cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.pickle'
  script: 
    'scripts/simulate_only_1scale_soma.py'

rule merge_effsum_active:
  output:
    'workflows/new_clustering/data/APC_effsum_active_{cell_id}-cond_scale_fct{cond_scale_fct}--xymax_{xymax}-dxy_{dxy}.csv'
  input:
    expand(
        'workflows/new_clustering/data/effsum_active_data/{{cell_id}}/APC_for_slp-id{patt_id}-xymax_{{xymax}}-dxy_{{dxy}}-norm_power_{norm_power}-cond_scale_fct{{cond_scale_fct}}-.csv',
        patt_id=patt_ids,
        norm_power=config['norm_power']
    )
  script:
    'scripts/merge_data.py'

rule simulate_effsum_active:
  output: 
    'workflows/new_clustering/data/effsum_active_data/{cell_id}/APC_for_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cond_scale_fct{cond_scale_fct}-.csv'
  input: 
    'workflows/new_clustering/data/cond_data/{cell_id}/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.npy',
    'workflows/new_clustering/data/cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.pickle'
  script: 
    'scripts/simulate_effsum_active.py'

rule calculate_effsum_conductance:
  output:
    'workflows/new_clustering/data/cond_data/{cell_id}/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.npy',
    'workflows/new_clustering/data/cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.pickle',
    'workflows/new_clustering/data/cond_data/{cell_id}/comp_conds_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-.npy'
  input:
    'workflows/new_clustering/data/light_patterns/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}.csv',
    'workflows/new_clustering/data/comp_data/{cell_id}.npy'
  script:
    'scripts/calculate_effsum_conductance.py'

rule merge_adex:
  output:
    'workflows/new_clustering/data/APC_adex_{cell_id}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}-xymax_{xymax}-dxy_{dxy}.csv'
  input:
    expand(
        'workflows/new_clustering/data/adex_data/{{cell_id}}/APC_for_slp-id{patt_id}-xymax_{{xymax}}-dxy_{{dxy}}-norm_power_{norm_power}-cond_scale_fct{{cond_scale_fct}}-cluster_{{cluster_grid_width}}.csv',
        patt_id=patt_ids,
        norm_power=config['norm_power']
    )
  script:
    'scripts/merge_data.py'

rule simulate_adex:
  output: 
    'workflows/new_clustering/data/adex_data/{cell_id}/APC_for_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}.csv'
  input: 
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.npy',
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.pickle',
    'workflows/new_clustering/adex_models/compiled_adex_fit_to_{cell_id}.pickle'
  script: 
    'scripts/simulate_adex.py'

rule generate_adex_model:
  output:
    'workflows/new_clustering/adex_models/compiled_adex_fit_to_{cell_id}.pickle'
  input:
    'workflows/new_clustering/adex_models/adex_fit_to_{cell_id}.nestml'
  script:
    'scripts/compile_adex_model.py'

rule merge_reduced_active:
  output:
    'workflows/new_clustering/data/APC_reduced_active_{cell_id}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}-xymax_{xymax}-dxy_{dxy}.csv'
  input:
    expand(
        'workflows/new_clustering/data/reduced_active_data/{{cell_id}}/APC_for_slp-id{patt_id}-xymax_{{xymax}}-dxy_{{dxy}}-norm_power_{norm_power}-cond_scale_fct{{cond_scale_fct}}-cluster_{{cluster_grid_width}}.csv',
        patt_id=patt_ids,
        norm_power=config['norm_power']
    )
  script:
    'scripts/merge_data.py'

rule simulate_reduced_active:
  output: 
    'workflows/new_clustering/data/reduced_active_data/{cell_id}/APC_for_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cond_scale_fct{cond_scale_fct}-cluster_{cluster_grid_width}.csv'
  input: 
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.npy',
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.pickle'
  script: 
    'scripts/simulate_effsum_active.py'

rule calculate_grouped_conductance:
  output:
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.npy',
    'workflows/new_clustering/data/grouped_cond_data/{cell_id}/temp_protocol__slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}-cluster_{cluster_grid_width}.pickle',
  input:
    'workflows/new_clustering/data/light_patterns/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}.csv',
    'workflows/new_clustering/data/comp_data/{cell_id}.npy',
    'workflows/new_clustering/data/grouping/{cell_id}-cluster_{cluster_grid_width}.pickle'
  script:
    'scripts/calculate_grouped_conductance.py'

rule group_morphology:
  output:
    'workflows/new_clustering/data/grouping/{cell_id}-cluster_{cluster_grid_width}.pickle',
    'workflows/new_clustering/data/grouping/{cell_id}-cluster_{cluster_grid_width}.png'
  script:
    'scripts/spatially_group_morphology.py'

rule get_cell_comp_data:
  output:
    'workflows/new_clustering/data/comp_data/{cell_id}.npy'
  script:
    'scripts/get_comp_data.py'

rule merge_full_active:
  output: 
    'workflows/new_clustering/data/APC_full_active_{cell_id}-xymax_{xymax}-dxy_{dxy}.csv'
  input: 
    expand(
        'workflows/new_clustering/data/full_active_data/{{cell_id}}/APC_for_slp-id{patt_id}-xymax_{{xymax}}-dxy_{{dxy}}-norm_power_{norm_power}.csv',
        patt_id=patt_ids,
        norm_power=config['norm_power']
    )
  script: 
    'scripts/merge_data.py'

rule simulate_full_active:
  output: 
    'workflows/new_clustering/data/full_active_data/{cell_id}/APC_for_slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}-norm_power_{norm_power}.csv'
  input: 
    'workflows/new_clustering/data/light_patterns/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}.csv'
  script: 
    'scripts/simulate_full_active.py'

rule gen_single_light_patterns:
  output: 
    'workflows/new_clustering/data/light_patterns/slp-id{patt_id}-xymax_{xymax}-dxy_{dxy}.csv'
  params:
    diameter_um=config['slp_diameter_um'],
    NA=config['slp_NA'],
    x=xs,
    y=ys
  script:
    'scripts/gen_single_light_patterns.py'
